package com.oracle.jcclassic.samples.helloworld;

import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.Util;
import javacard.security.AESKey;
import javacard.security.KeyBuilder;
import javacardx.crypto.Cipher;

public class HelloWorld extends Applet {
    private static final byte INS_SET_TARGET_DATA = (byte) 0x30;
    private static final byte INS_COMPARE_DATA = (byte) 0x10;
    private static final byte INS_ENCRYPT_DATA = (byte) 0x20;

    private static final byte[] AES_KEY = { 
        (byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, 
        (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, 
        (byte) 0x08, (byte) 0x09, (byte) 0x0A, (byte) 0x0B, 
        (byte) 0x0C, (byte) 0x0D, (byte) 0x0E, (byte) 0x0F 
    };

    private AESKey aesKey;
    private Cipher aesCipher;
    private byte[] targetData;

    protected HelloWorld() {
        aesKey = (AESKey) KeyBuilder.buildKey(KeyBuilder.TYPE_AES, KeyBuilder.LENGTH_AES_128, false);
        aesKey.setKey(AES_KEY, (short) 0);
        aesCipher = Cipher.getInstance(Cipher.ALG_AES_BLOCK_128_CBC_NOPAD, false);
        targetData = new byte[32];
        register();
    }

    public static void install(byte[] bArray, short bOffset, byte bLength) {
        new HelloWorld();
    }

    @Override
    public void process(APDU apdu) {
        byte[] buffer = apdu.getBuffer();

        if (selectingApplet()) {
            return;
        }

        byte ins = buffer[ISO7816.OFFSET_INS];

        switch (ins) {
            case INS_SET_TARGET_DATA:
                setTargetData(apdu, buffer);
                break;
            case INS_COMPARE_DATA:
                handleCompareData(apdu, buffer);
                break;
//            case INS_ENCRYPT_DATA:
//                handleEncryptData(apdu, buffer);
//                break;
            default:
                ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
        }
    }

    private void setTargetData(APDU apdu, byte[] buffer) {
        short bytesRead = apdu.setIncomingAndReceive();
        Util.arrayCopy(buffer, ISO7816.OFFSET_CDATA, targetData, (short) 0, bytesRead);
    }

    private void handleCompareData(APDU apdu, byte[] buffer) {
        short bytesRead = apdu.setIncomingAndReceive();
        if (bytesRead != targetData.length) {
            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
        }

        boolean isMatch = Util.arrayCompare(buffer, ISO7816.OFFSET_CDATA, targetData, (short) 0, bytesRead) == 0;

        apdu.setOutgoing();
        apdu.setOutgoingLength((short) 1);
        buffer[0] = (byte) (isMatch ? 0x01 : 0x00);
        apdu.sendBytes((short) 0, (short) 1);
    }

    private void handleEncryptData(APDU apdu, byte[] buffer) {
        short bytesRead = apdu.setIncomingAndReceive();
//        if (bytesRead % 16 != 0) {
//            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
//        }

        aesCipher.init(aesKey, Cipher.MODE_ENCRYPT);
        aesCipher.doFinal(buffer, ISO7816.OFFSET_CDATA, bytesRead, buffer, (short) 0);

        apdu.setOutgoing();
        apdu.setOutgoingLength(bytesRead);
        apdu.sendBytes((short) 0, bytesRead);
    }
}
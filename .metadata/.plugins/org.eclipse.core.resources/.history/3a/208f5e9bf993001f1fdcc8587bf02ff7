package com.oracle.jcclassic.samples.helloworld;

import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.Util;

public class HelloWorld extends Applet {
	 private static final byte INS_SET_TARGET_DATA = (byte) 0x10;  // New instruction for setting TARGET_DATA
	    private byte[] targetData;

    /**
     * Only this class's install method should create the applet object.
     */
    protected HelloWorld() {
        register();
        targetData = new byte[16];
    }

    /**
     * Installs this applet.
     *
     * @param bArray
     *            the array containing installation parameters
     * @param bOffset
     *            the starting offset in bArray
     * @param bLength
     *            the length in bytes of the parameter data in bArray
     */
    public static void install(byte[] bArray, short bOffset, byte bLength) {
        new HelloWorld();
    }

    /**
     * Processes an incoming APDU.
     *
     * @see APDU
     * @param apdu
     *            the incoming APDU
     * @exception ISOException
     *                with the response bytes per ISO 7816-4
     */
    @Override 
    public void process(APDU apdu) {
        byte[] buffer = apdu.getBuffer();

        // Check SELECT APDU command
        if (selectingApplet()) {
            return;
        }
        byte ins = buffer[ISO7816.OFFSET_INS];  // Get the instruction byte

        // Check if the instruction is to set TARGET_DATA
        if (ins == INS_SET_TARGET_DATA) {
            short length = apdu.setIncomingAndReceive();
            if (length > targetData.length) {
                ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);  // Throw error if input length is too large
            }
            // Copy input data to targetData
            Util.arrayCopyNonAtomic(buffer, ISO7816.OFFSET_CDATA, targetData, (short) 0, length);
            return;  // Exit after setting TARGET_DATA
        }

        // Regular processing command
        short bytesRead = apdu.setIncomingAndReceive();
        if (bytesRead == targetData.length) {
            boolean isMatch = Util.arrayCompare(buffer, ISO7816.OFFSET_CDATA, targetData, (short) 0, bytesRead) == 0;

            apdu.setOutgoing();
            apdu.setOutgoingLength((short) 1);
            buffer[0] = (byte) (isMatch ? 0x01 : 0x00);
            apdu.sendBytes((short) 0, (short) 1);
        } else {
            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
        }
    }
}

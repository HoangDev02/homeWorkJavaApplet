package com.oracle.javacard.sample;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.List;

import javax.smartcardio.Card;
import javax.smartcardio.CardChannel;
import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.smartcardio.CommandAPDU;
import javax.smartcardio.ResponseAPDU;
import javax.smartcardio.TerminalFactory;
import com.oracle.javacard.ams.AMService;
import com.oracle.javacard.ams.AMServiceFactory;
import com.oracle.javacard.ams.AMSession;
import com.oracle.javacard.ams.config.AID;
import com.oracle.javacard.ams.config.CAPFile;
import com.oracle.javacard.ams.script.APDUScript;
import com.oracle.javacard.ams.script.ScriptFailedException;
import com.oracle.javacard.ams.script.Scriptable;

public class AMSHelloWorldClient {

    static final String isdAID = "aid:A000000151000000"; // AID of Service Descriptor
    static final String sAID_CAP = "aid:a00000006203010C01"; // AID of CAP file
    static final String sAID_AppletInstance = "aid:a00000006203010C0101"; // AID of instance applet
    static final CommandAPDU selectApplet = new CommandAPDU(0x00, 0xA4, 0x04, 0x00, AID.from(sAID_AppletInstance).toBytes(), 256);

    // INS value for comparing data
    private static final byte INS_COMPARE_DATA = (byte) 0x10;

    public static void main(String[] args) {
        try {
            CAPFile appFile = CAPFile.from(getArg(args, "cap"));
            Properties props = new Properties();
            props.load(new FileInputStream(getArg(args, "props")));

            // Initialize Application Management Service
            AMService ams = AMServiceFactory.getInstance("GP2.2");
            ams.setProperties(props);

            // Deploy CAPFile
            AMSession deploy = ams.openSession(isdAID)
                    .load(sAID_CAP, appFile.getBytes())
                    .install(sAID_CAP, sAID_AppletInstance, sAID_AppletInstance)
                    .close();

            // Test script: deploy, use and undeploy
            TestScript testScript = new TestScript()
                    .append(deploy)
                    .append(selectApplet)
                    .append(new CommandAPDU(0x80, INS_COMPARE_DATA, 0x00, 0x00, new byte[] { 'D', 'A', 'T', 'A', '_', 'A', 'B', 'C', 'D' }),
                            new ResponseAPDU(new byte[] { 0x01, (byte) 0x90, 0x00 })) // Expect 0x01 for true
                    .append(new CommandAPDU(0x00, 0xB0, 0x00, 0x00, new byte[0])); // Just a placeholder to ensure the script runs

            // Execute the script
            CardTerminal t = getTerminal("socket", "127.0.0.1", "9025");
            Card c = t.connect("*");
            testScript.run(c.getBasicChannel());
            c.disconnect(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String getArg(String[] args, String argName) {
        String value = null;
        for (String param : args) {
            if (param.startsWith("-" + argName + "=")) {
                value = param.substring(param.indexOf('=') + 1);
            }
        }
        if (value == null || value.length() == 0) {
            throw new IllegalArgumentException("Argument " + argName + " is missing");
        }
        return value;
    }

    private static CardTerminal getTerminal(String... connectionParams) throws NoSuchAlgorithmException, NoSuchProviderException, CardException {
        TerminalFactory tf;
        String connectivityType = connectionParams[0];
        if (connectivityType.equals("socket")) {
            String ipaddr = connectionParams[1];
            String port = connectionParams[2];
            tf = TerminalFactory.getInstance("SocketCardTerminalFactoryType",
                    List.of(new InetSocketAddress(ipaddr, Integer.parseInt(port))),
                    "SocketCardTerminalProvider");
        } else {
            tf = TerminalFactory.getDefault();
        }
        return tf.terminals().list().get(0);
    }

    private static class TestScript extends APDUScript {
        private boolean isExpected = true;

        public List<ResponseAPDU> run(CardChannel channel) throws ScriptFailedException {
            return super.run(channel, this::processCommand, null);
        }

        private CommandAPDU processCommand(CommandAPDU apdu) {
            print(apdu);
            return apdu;
        }

        @Override
        public TestScript append(Scriptable<CardChannel, CommandAPDU, ResponseAPDU> other) {
            super.append(other);
            return this;
        }

        public TestScript append(CommandAPDU apdu, ResponseAPDU expected) {
            super.append(apdu);
            ResponseAPDU response = execute(apdu); // Execute the APDU and get response
            isExpected = isExpected && response.equals(expected);
            return this;
        }

        public void printResult() {
            System.out.println(isExpected ? "true" : "false");
        }

        private ResponseAPDU execute(CommandAPDU apdu) {
            // Method to execute the command and return the response
            return new ResponseAPDU(new byte[] { 0x01, (byte) 0x90, 0x00 }); // Dummy response for example
        }

        private static void print(CommandAPDU apdu) {
            System.out.printf("APDU: %02X%02X%02X%02X%n", apdu.getCLA(), apdu.getINS(), apdu.getP1(), apdu.getP2());
        }
    }
}

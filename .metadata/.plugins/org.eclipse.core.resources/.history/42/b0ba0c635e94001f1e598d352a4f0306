package com.oracle.javacard.sample;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import javax.smartcardio.*;

import com.oracle.javacard.ams.AMService;
import com.oracle.javacard.ams.AMServiceFactory;
import com.oracle.javacard.ams.AMSession;
import com.oracle.javacard.ams.config.AID;
import com.oracle.javacard.ams.config.CAPFile;

public class AMSHelloWorldClient {
    static final String isdAID = "aid:A000000151000000"; // Service Descriptor AID
    static final String sAID_CAP = "aid:a00000006203010C01"; // CAP file AID
    static final String sAID_AppletClass = "aid:a00000006203010C0101"; // Applet class AID
    static final String sAID_Applet = "aid:a00000006203010C0101"; // Applet instance AID
    static final CommandAPDU selectApplet = new CommandAPDU(0x00, 0xA4, 0x04, 0x00,
            AID.from(sAID_AppletClass).toBytes(), 256);

    // INS values based on applet definitions
    private static final byte INS_SET_TARGET_DATA = (byte) 0x30;
    private static final byte INS_COMPARE_DATA = (byte) 0x10;
    private static final byte INS_ENCRYPT_DATA = (byte) 0x20;

    public static void main(String[] args) {
        try {
            CAPFile appFile = CAPFile.from(getArg(args, "cap"));
            Properties props = new Properties();
            props.load(new FileInputStream(getArg(args, "props")));

            AMService ams = AMServiceFactory.getInstance("GP2.2");
            ams.setProperties(props);

            // Deploy and install CAPFile
            AMSession deploy = ams.openSession(isdAID).load(sAID_CAP, appFile.getBytes())
                    .install(sAID_CAP, sAID_AppletClass, sAID_AppletClass).close();
            AMSession undeploy = ams.openSession(isdAID).uninstall(sAID_AppletClass).unload(sAID_CAP).close();

//            Scanner scanner = new Scanner(System.in);
//            String inputData;
//            do {
//                System.out.print("Enter data to set in applet (exactly 9 characters): ");
//                inputData = scanner.nextLine();
//                if (inputData.length() != 9) {
//                    System.out.println("Error: You must enter exactly 9 characters.");
//                }
//            } while (inputData.length() != 9);

            byte[] dataBytes = "DATA_ABCD".getBytes();

            // Connect to the card
            CardTerminal terminal = getTerminal("socket", "127.0.0.1", "9025");
            Card card = terminal.connect("*");
            CardChannel channel = card.getBasicChannel();
            
            // Select the applet
            ResponseAPDU response = channel.transmit(selectApplet);
            System.out.println("Select Applet Response: " + response);
            System.out.println("Select Applet Response: " + byteArrayToHex(response.getBytes()));
            
            // Send SET_TARGET_DATA command
            CommandAPDU setTargetDataAPDU = new CommandAPDU(0x80, INS_SET_TARGET_DATA, 0x00, 0x00, dataBytes);
            response = channel.transmit(setTargetDataAPDU);
            System.out.println("length"+ response);
            System.out.println("Set Target Data Response: " + byteArrayToHex(response.getBytes()));

            // Send COMPARE_DATA command
            CommandAPDU compareDataAPDU = new CommandAPDU(0x80, INS_COMPARE_DATA, 0x00, 0x00, dataBytes);
            response = channel.transmit(compareDataAPDU);
            System.out.println("length: "+ response);
            System.out.println("Compare Data Response: " + byteArrayToHex(response.getBytes()));

            // Send ENCRYPT_DATA command
            CommandAPDU encryptDataAPDU = new CommandAPDU(0x80, INS_ENCRYPT_DATA, 0x00, 0x00, dataBytes);
            response = channel.transmit(encryptDataAPDU);
            System.out.println("Encrypt Data Response: " + byteArrayToHex(response.getBytes()));

            // Disconnect the card
            card.disconnect(true);

        } catch (NoSuchAlgorithmException | NoSuchProviderException | CardException | IOException e) {
            e.printStackTrace();
        }
    }

    private static String getArg(String[] args, String argName) {
        for (String param : args) {
            if (param.startsWith("-" + argName + "=")) {
                return param.substring(param.indexOf('=') + 1);
            }
        }
        throw new IllegalArgumentException("Argument " + argName + " is missing");
    }

    private static CardTerminal getTerminal(String... connectionParams)
            throws NoSuchAlgorithmException, NoSuchProviderException, CardException {
        TerminalFactory tf;
        String connectivityType = connectionParams[0];
        if (connectivityType.equals("socket")) {
            String ipaddr = connectionParams[1];
            String port = connectionParams[2];
            tf = TerminalFactory.getInstance("SocketCardTerminalFactoryType",
                    List.of(new InetSocketAddress(ipaddr, Integer.parseInt(port))), "SocketCardTerminalProvider");
        } else {
            tf = TerminalFactory.getDefault();
        }
        return tf.terminals().list().get(0);
    }

    private static String byteArrayToHex(byte[] byteArray) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : byteArray) {
            hexString.append(String.format("%02X", b));
        }
        return hexString.toString();
    }
}
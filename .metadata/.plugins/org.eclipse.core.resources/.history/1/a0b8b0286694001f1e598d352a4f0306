package com.oracle.javacard.sample;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.util.stream.IntStream;
import javax.smartcardio.*;

import com.oracle.javacard.ams.AMService;
import com.oracle.javacard.ams.AMServiceFactory;
import com.oracle.javacard.ams.AMSession;
import com.oracle.javacard.ams.config.AID;
import com.oracle.javacard.ams.config.CAPFile;
import com.oracle.javacard.ams.script.APDUScript;
import com.oracle.javacard.ams.script.ScriptFailedException;
import com.oracle.javacard.ams.script.Scriptable;

public class AMSHelloWorldClient {

	static final String isdAID = "aid:A000000151000000"; // Service Descriptor AID
	static final String sAID_CAP = "aid:a00000006203010C01"; // CAP file AID
	static final String sAID_AppletClass = "aid:a00000006203010C0101"; // Applet class AID
	static final String sAID_AppletInstance = "aid:a00000006203010C0101"; // Applet instance AID
	static final CommandAPDU selectApplet = new CommandAPDU(0x00, 0xA4, 0x04, 0x00,
			AID.from(sAID_AppletInstance).toBytes(), 256);

	// INS values based on applet definitions
	private static final byte INS_SET_TARGET_DATA = (byte) 0x30;
	private static final byte INS_COMPARE_DATA = (byte) 0x10;
	private static final byte INS_ENCRYPT_DATA = (byte) 0x20;

	public static void main(String[] args) {
		try {
			CAPFile appFile = CAPFile.from(getArg(args, "cap"));
			Properties props = new Properties();
			props.load(new FileInputStream(getArg(args, "props")));

			AMService ams = AMServiceFactory.getInstance("GP2.2");
			ams.setProperties(props);

			// Deploy and install CAPFile
			AMSession deploy = ams.openSession(isdAID).load(sAID_CAP, appFile.getBytes())
					.install(sAID_CAP, sAID_AppletClass, sAID_AppletInstance).close();
			AMSession undeploy = ams.openSession(isdAID).uninstall(sAID_AppletInstance).unload(sAID_CAP).close();
			
			Scanner scanner = new Scanner(System.in);
			System.out.print("Enter Input Applet: ");
			String inputApplet = scanner.nextLine();
			byte[] inputBytes = inputApplet.getBytes();
			
			System.out.print("Enter input Client: ");
			String inputData = scanner.nextLine();
			byte[] dataBytes = inputData.getBytes();
			// Create APDU command to set target data
            CommandAPDU setTargetDataAPDU = new CommandAPDU(0x80, INS_SET_TARGET_DATA, 0x00, 0x00, inputBytes);

            // Create APDU command to compare data
            CommandAPDU compareDataAPDU = new CommandAPDU(0x80, INS_COMPARE_DATA, 0x00, 0x00, dataBytes);

            // Create APDU command to encrypt data
            CommandAPDU encryptDataAPDU = new CommandAPDU(0x80, INS_ENCRYPT_DATA, 0x00, 0x00, dataBytes);
			// Test script for deploy, select, set target data, compare, encrypt, and
			// undeploy
            TestScript testScript = new TestScript().append(deploy).append(selectApplet)
                    .append(setTargetDataAPDU)
                    .append(compareDataAPDU, new ResponseAPDU(new byte[] { 0x01, (byte) 0x90, 0x00 })) // Expected response for comparison
                    .append(encryptDataAPDU)
                    .append(undeploy);

			CardTerminal terminal = getTerminal("socket", "127.0.0.1", "9025");
			Card card = terminal.connect("*");
			List<ResponseAPDU> responses = testScript.run(card.getBasicChannel());
			card.disconnect(true);

			  System.out.println("Response count: " + responses.size());
		} catch (NoSuchAlgorithmException | NoSuchProviderException | CardException | ScriptFailedException
				| IOException e) {
			e.printStackTrace();
		}
	}

	private static String getArg(String[] args, String argName) {
		for (String param : args) {
			if (param.startsWith("-" + argName + "=")) {
				return param.substring(param.indexOf('=') + 1);
			}
		}
		throw new IllegalArgumentException("Argument " + argName + " is missing");
	}
	  private static String byteArrayToHex(byte[] byteArray) {
	        StringBuilder hexString = new StringBuilder();
	        for (byte b : byteArray) {
	            hexString.append(String.format("%02X", b));
	        }
	        return hexString.toString();
	    }
	private static CardTerminal getTerminal(String... connectionParams)
			throws NoSuchAlgorithmException, NoSuchProviderException, CardException {
		TerminalFactory tf;
		String connectivityType = connectionParams[0];
		if (connectivityType.equals("socket")) {
			String ipaddr = connectionParams[1];
			String port = connectionParams[2];
			tf = TerminalFactory.getInstance("SocketCardTerminalFactoryType",
					List.of(new InetSocketAddress(ipaddr, Integer.parseInt(port))), "SocketCardTerminalProvider");
		} else {
			tf = TerminalFactory.getDefault();
		}
		return tf.terminals().list().get(0);
	}

	private static class TestScript extends APDUScript {
	    private List<CommandAPDU> commands = new LinkedList<>();
	    private List<ResponseAPDU> responses = new LinkedList<>();
	    private int index = 0;

	    // Run the script and compare responses with expected values
	    public List<ResponseAPDU> run(CardChannel channel) throws ScriptFailedException {
	        return super.run(channel, c -> lookupIndex(c), r -> !isExpected(r));
	    }

	    @Override
	    public TestScript append(Scriptable<CardChannel, CommandAPDU, ResponseAPDU> other) {
	        super.append(other);
	        return this;
	    }

	    // Custom append method to handle CommandAPDU with expected ResponseAPDU
	    public TestScript append(CommandAPDU apdu, ResponseAPDU expected) {
	        this.commands.add(apdu);
	        this.responses.add(expected);
	        super.append(apdu); // Add to the script for execution
	        return this;
	    }

	    // Append method for CommandAPDU without expected ResponseAPDU
	    public TestScript append(CommandAPDU apdu) {
	        this.commands.add(apdu);
	        this.responses.add(null); // No expected response specified
	        super.append(apdu); // Add to the script for execution
	        return this;
	    }

	    private CommandAPDU lookupIndex(CommandAPDU apdu) {
	        print(apdu);
	        this.index = IntStream.range(0, this.commands.size())
	                .filter(i -> apdu.equals(this.commands.get(i))) // Use .equals() for comparison
	                .findFirst()
	                .orElse(-1); // Return -1 if not found
	        return apdu;
	    }


	    private boolean isExpected(ResponseAPDU response) {
	        ResponseAPDU expected = (index < 0) ? response : this.responses.get(index);
	        boolean matches = expected == null || response.equals(expected);
	        
	        // Check if the current command is INS_COMPARE_DATA
	        if (this.commands.get(index).getINS() == INS_COMPARE_DATA) {
	            // Output whether the comparison is true or false
	            System.out.println("INS_COMPARE_DATA Result: " + matches);
	        }
	        
	        // If the response does not match the expected value, print details
	        if (!matches) {
	            System.out.println("Received: ");
	            print(response);
	            System.out.println("Expected: ");
	            print(expected);
	        }
	        
	        print(response);
	        return matches;
	    }
	    private static void print(CommandAPDU apdu) {
	        StringBuilder sb = new StringBuilder();
	        sb.append(String.format("%02X%02X%02X%02X %02X[", apdu.getCLA(), apdu.getINS(), apdu.getP1(), apdu.getP2(), apdu.getNc()));
	        for (byte b : apdu.getData()) {
	            sb.append(String.format("%02X", b));
	        }
	        sb.append("]");
	        System.out.format("[%1$tF %1$tT %1$tL %1$tZ] [APDU-C] %2$s %n", System.currentTimeMillis(), sb.toString());
	    }

	    private static void print(ResponseAPDU apdu) {
	        byte[] bytes = apdu.getData();
	        StringBuilder sb = new StringBuilder();
	        for (byte b : bytes) {
	            sb.append(String.format("%02X", b));
	        }
	        System.out.format("[%1$tF %1$tT %1$tL %1$tZ] [APDU-R] [%2$s] SW:%3$04X %n", System.currentTimeMillis(), sb.toString(), apdu.getSW());
	    }
	}

}

package com.oracle.javacard.sample;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.util.stream.IntStream;
import javax.smartcardio.*;

import com.oracle.javacard.ams.AMService;
import com.oracle.javacard.ams.AMServiceFactory;
import com.oracle.javacard.ams.AMSession;
import com.oracle.javacard.ams.config.AID;
import com.oracle.javacard.ams.config.CAPFile;
import com.oracle.javacard.ams.script.APDUScript;
import com.oracle.javacard.ams.script.ScriptFailedException;
import com.oracle.javacard.ams.script.Scriptable;

public class HomeWork {

	static final String isdAID = "aid:A000000151000000"; // Service Descriptor AID
	static final String sAID_CAP = "aid:a00000006203010C01"; // CAP file AID
	static final String sAID_AppletClass = "aid:a00000006203010C0101"; // Applet class AID
	static final String sAID_AppletInstance = "aid:a00000006203010C0101"; // Applet instance AID
	static final CommandAPDU selectApplet = new CommandAPDU(0x00, 0xA4, 0x04, 0x00,
			AID.from(sAID_AppletInstance).toBytes(), 256);

	// INS values based on applet definitions
	private static final byte INS_SET_TARGET_DATA = (byte) 0x30;
	private static final byte INS_COMPARE_DATA = (byte) 0x10;
	private static final byte INS_ENCRYPT_DATA = (byte) 0x20;

	public static void main(String[] args) {
		System.out.println("hello word ");
	}
	
	private static String getArg(String[] args, String argName) {
		for (String param : args) {
			if (param.startsWith("-" + argName + "=")) {
				return param.substring(param.indexOf('=') + 1);
			}
		}
		throw new IllegalArgumentException("Argument " + argName + " is missing");
	}

	private static CardTerminal getTerminal(String... connectionParams)
			throws NoSuchAlgorithmException, NoSuchProviderException, CardException {
		TerminalFactory tf;
		String connectivityType = connectionParams[0];
		if (connectivityType.equals("socket")) {
			String ipaddr = connectionParams[1];
			String port = connectionParams[2];
			tf = TerminalFactory.getInstance("SocketCardTerminalFactoryType",
					List.of(new InetSocketAddress(ipaddr, Integer.parseInt(port))), "SocketCardTerminalProvider");
		} else {
			tf = TerminalFactory.getDefault();
		}
		return tf.terminals().list().get(0);
	}

	private static class TestScript extends APDUScript {
	    private List<CommandAPDU> commands = new LinkedList<>();
	    private List<ResponseAPDU> responses = new LinkedList<>();
	    private int index = 0;

	    // Run the script and compare responses with expected values
	    public List<ResponseAPDU> run(CardChannel channel)  {
	        return super.run(channel, c -> lookupIndex(c), r -> !isExpected(r));
	    }

	    @Override
	    public TestScript append(Scriptable<CardChannel, CommandAPDU, ResponseAPDU> other) {
	        super.append(other);
	        return this;
	    }

	    // Custom append method to handle CommandAPDU with expected ResponseAPDU
	    public TestScript append(CommandAPDU apdu, ResponseAPDU expected) {
	        this.commands.add(apdu);
	        this.responses.add(expected);
	        super.append(apdu); // Add to the script for execution
	        return this;
	    }

	    // Append method for CommandAPDU without expected ResponseAPDU
	    public TestScript append(CommandAPDU apdu) {
	        this.commands.add(apdu);
	        this.responses.add(null); // No expected response specified
	        super.append(apdu); // Add to the script for execution
	        return this;
	    }

	    private CommandAPDU lookupIndex(CommandAPDU apdu) {
//	        print(apdu);
	        this.index = IntStream.range(0, this.commands.size())
	                .filter(i -> apdu.equals(this.commands.get(i))) // Use .equals() for comparison
	                .findFirst()
	                .orElse(-1); // Return -1 if not found
	        return apdu;
	    }


	    private boolean isExpected(ResponseAPDU response) {
	        ResponseAPDU expected = (index < 0) ? null : this.responses.get(index); // Check index before accessing responses
	        boolean matches = expected == null || response.equals(expected);
	        
	        // Output for INS_COMPARE_DATA
	        if (index >= 0 && this.commands.get(index).getINS() == INS_COMPARE_DATA) {
	            System.out.println("INS_COMPARE_DATA: " + matches);
	        }
	        // if (index >= 0 && this.commands.get(index).getINS() == INS_ENCRYPT_DATA) {
			
            // }
            
//	         print(response);
	        return true;
	    }
	    private static void print(CommandAPDU apdu) {
	        StringBuilder sb = new StringBuilder();
	        sb.append(String.format("%02X%02X%02X%02X %02X[", apdu.getCLA(), apdu.getINS(), apdu.getP1(), apdu.getP2(), apdu.getNc()));
	        for (byte b : apdu.getData()) {
	            sb.append(String.format("%02X", b));
	        }
	        sb.append("]");
	        System.out.format("[%1$tF %1$tT %1$tL %1$tZ] [APDU-C] %2$s %n", System.currentTimeMillis(), sb.toString());
	    }
	    
	    private static void print(ResponseAPDU apdu) {
	        byte[] bytes = apdu.getData();
	        StringBuilder sb = new StringBuilder();
	        for (byte b : bytes) {
	            sb.append(String.format("%02X", b));
	        }
	        System.out.format("[%1$tF %1$tT %1$tL %1$tZ] [APDU-R] [%2$s] SW:%3$04X %n", System.currentTimeMillis(), sb.toString(), apdu.getSW());
	    }
	}

}

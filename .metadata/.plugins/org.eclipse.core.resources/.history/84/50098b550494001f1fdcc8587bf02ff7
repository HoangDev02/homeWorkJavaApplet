package com.oracle.javacard.sample;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.util.stream.IntStream;
import javax.smartcardio.Card;
import javax.smartcardio.CardChannel;
import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.smartcardio.CommandAPDU;
import javax.smartcardio.ResponseAPDU;
import javax.smartcardio.TerminalFactory;

import com.oracle.javacard.ams.AMService;
import com.oracle.javacard.ams.AMServiceFactory;
import com.oracle.javacard.ams.AMSession;
import com.oracle.javacard.ams.config.AID;
import com.oracle.javacard.ams.config.CAPFile;
import com.oracle.javacard.ams.script.APDUScript;
import com.oracle.javacard.ams.script.ScriptFailedException;
import com.oracle.javacard.ams.script.Scriptable;

public class AMSHelloWorldClient {

    static final String isdAID = "aid:A000000151000000"; // AID c敲브 Service Descriptor
    static final String sAID_CAP = "aid:a00000006203010C01"; // AID c敲브 CAP file
    static final String sAID_AppletClass = "aid:a00000006203010C0101"; // AID c敲브 class applet
    static final String sAID_AppletInstance = "aid:a00000006203010C0101"; // AID c敲브 instance applet
    static final CommandAPDU selectApplet = new CommandAPDU(0x00, 0xA4, 0x04, 0x00, AID.from(sAID_AppletInstance).toBytes(), 256);

    // INS values
    private static final byte INS_COMPARE_DATA = (byte) 0x10;
    private static final byte INS_ENCRYPT_DATA = (byte) 0x20;

    public static void main(String[] args) {
        try {
            CAPFile appFile = CAPFile.from(getArg(args, "cap"));
            Properties props = new Properties();
            props.load(new FileInputStream(getArg(args, "props")));

            // Initialize Application Management Service
            AMService ams = AMServiceFactory.getInstance("GP2.2");
            ams.setProperties(props);

            // Deploy CAPFile
            AMSession deploy = ams.openSession(isdAID)
                    .load(sAID_CAP, appFile.getBytes())
                    .install(sAID_CAP, sAID_AppletClass, sAID_AppletInstance)
                    .close();

            // Unload CAPFile
            AMSession undeploy = ams.openSession(isdAID)
                    .uninstall(sAID_AppletInstance)
                    .unload(sAID_CAP)
                    .close();
            
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter data to compare (without spaces): ");
            String inputData = scanner.nextLine();
            byte[] dataBytes = inputData.getBytes();
            
            // Compare data
            executeCompareData(dataBytes);

            // Enter data for encryption
            System.out.print("Enter data to encrypt (must be multiple of 16 bytes): ");
            String inputEncryptData = scanner.nextLine();
            byte[] encryptDataBytes = inputEncryptData.getBytes();
            executeEncryptData(encryptDataBytes);
            
            System.out.println("AES Key: " + printAESKey());
            
        } catch (NoSuchAlgorithmException | NoSuchProviderException | CardException | ScriptFailedException
                | IOException e) {
            e.printStackTrace();
        }
    }

    private static void executeCompareData(byte[] dataBytes) throws CardException {
        // Create command APDU for compare data
        CommandAPDU compareDataAPDU = new CommandAPDU(0x80, INS_COMPARE_DATA, 0x00, 0x00, dataBytes);
        ResponseAPDU response = sendAPDU(compareDataAPDU);

        // Check response
        System.out.println("Comparison Result: " + (response.getSW() == 0x9000 ? "Success" : "Failure"));
    }

    private static void executeEncryptData(byte[] dataBytes) throws CardException, NoSuchAlgorithmException, NoSuchProviderException {
        // Ensure data length is multiple of 16
        if (dataBytes.length % 16 != 0) {
            System.err.println("Data length must be a multiple of 16 bytes for encryption.");
            return;
        }

        // Create command APDU for encrypting data
        CommandAPDU encryptDataAPDU = new CommandAPDU(0x80, INS_ENCRYPT_DATA, 0x00, 0x00, dataBytes);
        ResponseAPDU response = sendAPDU(encryptDataAPDU);

        // Print encrypted data
        if (response.getSW() == 0x9000) {
            byte[] encryptedData = response.getData();
            System.out.print("Encrypted Data: ");
            for (byte b : encryptedData) {
                System.out.printf("%02X", b);
            }
            System.out.println();
        } else {
            System.out.println("Encryption failed.");
        }
    }

    private static ResponseAPDU sendAPDU(CommandAPDU command) throws CardException, NoSuchAlgorithmException, NoSuchProviderException {
        CardTerminal t = getTerminal("socket", "127.0.0.1", "9025");
        Card c = t.connect("*");
        CardChannel channel = c.getBasicChannel();
        ResponseAPDU response = channel.transmit(command);
        c.disconnect(true);
        return response;
    }

    private static String printAESKey() {
        byte[] aesKey = {
            (byte)0x00, (byte)0x01, (byte)0x02, (byte)0x03,
            (byte)0x04, (byte)0x05, (byte)0x06, (byte)0x07,
            (byte)0x08, (byte)0x09, (byte)0x0A, (byte)0x0B,
            (byte)0x0C, (byte)0x0D, (byte)0x0E, (byte)0x0F
        };
        StringBuilder sb = new StringBuilder("AES Key: ");
        for (byte b : aesKey) {
            sb.append(String.format("%02X ", b));
        }
        return sb.toString();
    }

    private static String getArg(String[] args, String argName) throws IllegalArgumentException {
        String value = null;
        for (String param : args) {
            if (param.startsWith("-" + argName + "=")) {
                value = param.substring(param.indexOf('=') + 1);
            }
        }
        if (value == null || value.length() == 0) {
            throw new IllegalArgumentException("Argument " + argName + " is missing");
        }
        return value;
    }

    private static CardTerminal getTerminal(String... connectionParams) throws NoSuchAlgorithmException, NoSuchProviderException, CardException {
        TerminalFactory tf;
        String connectivityType = connectionParams[0];
        if (connectivityType.equals("socket")) {
            String ipaddr = connectionParams[1];
            String port = connectionParams[2];
            tf = TerminalFactory.getInstance("SocketCardTerminalFactoryType",
                    List.of(new InetSocketAddress(ipaddr, Integer.parseInt(port))),
                    "SocketCardTerminalProvider");
        } else {
            tf = TerminalFactory.getDefault();
        }
        return tf.terminals().list().get(0);
    }

    private static class TestScript extends APDUScript {
        private List<CommandAPDU> commands = new LinkedList<>();
        private List<ResponseAPDU> responses = new LinkedList<>();
        private int index = 0;

        public List<ResponseAPDU> run(CardChannel channel) throws ScriptFailedException {
            return super.run(channel, c -> lookupIndex(c), r -> !isExpected(r));
        }

        @Override
        public TestScript append(Scriptable<CardChannel, CommandAPDU, ResponseAPDU> other) {
            super.append(other);
            return this;
        }

        public TestScript append(CommandAPDU apdu, ResponseAPDU expected) {
            super.append(apdu);
            this.commands.add(apdu);
            this.responses.add(expected);
            return this;
        }

        public TestScript append(CommandAPDU apdu) {
            super.append(apdu);
            return this;
        }

        private CommandAPDU lookupIndex(CommandAPDU apdu) {
            print(apdu);
            this.index = IntStream.range(0, this.commands.size())
                    .filter(i -> apdu == this.commands.get(i))
                    .findFirst()
                    .orElse(-1);
            return apdu;
        }

        private boolean isExpected(ResponseAPDU response) {
            ResponseAPDU expected = (index < 0) ? response : this.responses.get(index);
            boolean matches = response.equals(expected);
            System.out.println(matches); // Print true or false
            return matches;
        }

        private static void print(CommandAPDU apdu) {
            StringBuilder sb = new StringBuilder();
            sb.append(String.format("%02X %02X %02X %02X ", apdu.getCLA(), apdu.getINS(), apdu.getP1(), apdu.getP2()));
            for (byte b : apdu.getData()) {
                sb.append(String.format("%02X ", b));
            }
            System.out.println(sb.toString());
        }
    }
}

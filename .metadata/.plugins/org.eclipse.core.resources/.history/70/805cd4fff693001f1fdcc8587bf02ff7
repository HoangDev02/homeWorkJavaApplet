package com.oracle.jcclassic.samples.helloworld;

import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.Util;

public class HelloWorld extends Applet {
    // Define constant for the expected input data as byte array
    private static final byte[] EXPECTED_STRING = { 'D', 'A', 'T', 'A', '_', 'A', 'B', 'C', 'D' };

    // Define APDU instruction for string comparison
    private static final byte INS_COMPARE_STRING = 0x01;
    private byte[] buffer;

    /**
     * Only this class's install method should create the applet object.
     */
    protected HelloWorld() {
        register();
        buffer = new byte[32]; // Buffer to hold response
    }

    /**
     * Installs this applet.
     *
     * @param bArray  the array containing installation parameters
     * @param bOffset the starting offset in bArray
     * @param bLength the length in bytes of the parameter data in bArray
     */
    public static void install(byte[] bArray, short bOffset, byte bLength) {
        new HelloWorld();
    }

    /**
     * Processes an incoming APDU.
     *
     * @see APDU
     * @param apdu the incoming APDU
     * @exception ISOException with the response bytes per ISO 7816-4
     */
    @Override
    public void process(APDU apdu) {
        if (selectingApplet()) {
            return; // If selected, return
        }

        // Get the buffer from the APDU
        byte[] buffer = apdu.getBuffer();
        // Check the instruction byte
        byte instruction = buffer[ISO7816.OFFSET_INS];

        switch (instruction) {
            case INS_COMPARE_STRING:
                compareString(apdu);
                break;
            default:
                ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
        }
    }

    private void compareString(APDU apdu) {
        // Get the incoming data length
        byte le = (byte) apdu.setIncomingAndReceive();
        short receivedLength = apdu.getIncomingLength();

        // Check if the incoming data length matches the expected length
        if (receivedLength == EXPECTED_STRING.length) {
            // Create a byte array to hold the incoming data
            byte[] inputData = new byte[receivedLength];
            // Copy the incoming data to the inputData array
            Util.arrayCopyNonAtomic(apdu.getBuffer(), ISO7816.OFFSET_CDATA, inputData, (short) 0, receivedLength);

            // Compare the incoming data with the expected string
            boolean isEqual = Util.arrayCompare(EXPECTED_STRING, (short) 0, inputData, (short) 0, receivedLength) == 0;

            // Set the response based on comparison result
            if (isEqual) {
                buffer[0] = 1; // True
            } else {
                buffer[0] = 0; // False
            }
            // Send back the response
            apdu.setOutgoingAndSend((short) 0, (short) 1);
        } else {
            // If the length does not match, throw an exception
            ISOException.throwIt(ISO7816.SW_DATA_INVALID);
        }
    }
}

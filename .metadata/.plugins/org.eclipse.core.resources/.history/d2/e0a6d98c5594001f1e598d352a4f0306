package com.oracle.javacard.sample;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.util.stream.IntStream;
import javax.smartcardio.*;

import com.oracle.javacard.ams.AMService;
import com.oracle.javacard.ams.AMServiceFactory;
import com.oracle.javacard.ams.AMSession;
import com.oracle.javacard.ams.config.AID;
import com.oracle.javacard.ams.config.CAPFile;
import com.oracle.javacard.ams.script.APDUScript;
import com.oracle.javacard.ams.script.ScriptFailedException;
import com.oracle.javacard.ams.script.Scriptable;

public class AMSHelloWorldClient {

    static final String isdAID = "aid:A000000151000000"; // Service Descriptor AID
    static final String sAID_CAP = "aid:a00000006203010C01"; // CAP file AID
    static final String sAID_AppletClass = "aid:a00000006203010C0101"; // Applet class AID
    static final String sAID_AppletInstance = "aid:a00000006203010C0101"; // Applet instance AID
    static final CommandAPDU selectApplet = new CommandAPDU(0x00, 0xA4, 0x04, 0x00, AID.from(sAID_AppletInstance).toBytes(), 256);

    // INS values based on applet definitions
    private static final byte INS_SET_TARGET_DATA = (byte) 0x30;
    private static final byte INS_COMPARE_DATA = (byte) 0x10;
    private static final byte INS_ENCRYPT_DATA = (byte) 0x20;

    public static void main(String[] args) {
        try {
            CAPFile appFile = CAPFile.from(getArg(args, "cap"));
            Properties props = new Properties();
            props.load(new FileInputStream(getArg(args, "props")));

            AMService ams = AMServiceFactory.getInstance("GP2.2");
            ams.setProperties(props);

            // Deploy and install CAPFile
            AMSession deploy = ams.openSession(isdAID)
                    .load(sAID_CAP, appFile.getBytes())
                    .install(sAID_CAP, sAID_AppletClass, sAID_AppletInstance)
                    .close();

            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter data (without spaces): ");
            String inputData = scanner.nextLine();
            byte[] dataBytes = inputData.getBytes();

            // Test script for deploy, select, set target data, compare, encrypt, and undeploy
            TestScript testScript = new TestScript()
                    .append(deploy)
                    .append(selectApplet)
                    .append(new CommandAPDU(0x80, INS_SET_TARGET_DATA, 0x00, 0x00, dataBytes))
                    .append(new CommandAPDU(0x80, INS_COMPARE_DATA, 0x00, 0x00, dataBytes),
                            new ResponseAPDU(new byte[] { 0x01, (byte) 0x90, 0x00 })) // Expected response for comparison
                    .append(new CommandAPDU(0x80, INS_ENCRYPT_DATA, 0x00, 0x00, dataBytes))
                    .append(undeploy);

            CardTerminal terminal = getTerminal("socket", "127.0.0.1", "9025");
            Card card = terminal.connect("*");
            List<ResponseAPDU> responses = testScript.run(card.getBasicChannel());
            card.disconnect(true);

            System.out.println("Response count: " + responses.size());

        } catch (NoSuchAlgorithmException | NoSuchProviderException | CardException | ScriptFailedException
                | IOException e) {
            e.printStackTrace();
        }
    }

    private static String getArg(String[] args, String argName) {
        for (String param : args) {
            if (param.startsWith("-" + argName + "=")) {
                return param.substring(param.indexOf('=') + 1);
            }
        }
        throw new IllegalArgumentException("Argument " + argName + " is missing");
    }

    private static CardTerminal getTerminal(String... connectionParams) throws NoSuchAlgorithmException, NoSuchProviderException, CardException {
        TerminalFactory tf;
        String connectivityType = connectionParams[0];
        if (connectivityType.equals("socket")) {
            String ipaddr = connectionParams[1];
            String port = connectionParams[2];
            tf = TerminalFactory.getInstance("SocketCardTerminalFactoryType",
                    List.of(new InetSocketAddress(ipaddr, Integer.parseInt(port))),
                    "SocketCardTerminalProvider");
        } else {
            tf = TerminalFactory.getDefault();
        }
        return tf.terminals().list().get(0);
    }

    private static class TestScript extends APDUScript {
        private final List<CommandAPDU> commands = new LinkedList<>();
        private final List<ResponseAPDU> responses = new LinkedList<>();
        private int index = 0;

        public List<ResponseAPDU> run(CardChannel channel) throws ScriptFailedException {
            return super.run(channel, this::lookupIndex, this::isExpected);
        }

        public TestScript append(Scriptable<CardChannel, CommandAPDU, ResponseAPDU> other) {
            super.append(other);
            return this;
        }

        public TestScript append(CommandAPDU apdu, ResponseAPDU expected) {
            super.append(apdu);
            this.commands.add(apdu);
            this.responses.add(expected);
            return this;
        }

        private CommandAPDU lookupIndex(CommandAPDU apdu) {
            this.index = IntStream.range(0, this.commands.size())
                    .filter(i -> apdu.equals(this.commands.get(i)))
                    .findFirst()
                    .orElse(-1);
            return apdu;
        }

        private boolean isExpected(ResponseAPDU response) {
            if (index < 0) return false;
            ResponseAPDU expected = this.responses.get(index);
            return response.equals(expected);
        }
    }
}

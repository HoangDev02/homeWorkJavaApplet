package com.oracle.javacard.sample;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import javax.smartcardio.Card;
import javax.smartcardio.CardChannel;
import javax.smartcardio.CardException;
import javax.smartcardio.CommandAPDU;
import javax.smartcardio.ResponseAPDU;
import javax.smartcardio.TerminalFactory;
import javax.smartcardio.CardTerminal;

import com.oracle.javacard.ams.AMService;
import com.oracle.javacard.ams.AMServiceFactory;
import com.oracle.javacard.ams.AMSession;
import com.oracle.javacard.ams.config.AID;
import com.oracle.javacard.ams.config.CAPFile;

public class AMSHelloWorldClient {

    static final String isdAID = "aid:A000000151000000";
    static final String sAID_CAP = "aid:a00000006203010C01";
    static final String sAID_AppletClass = "aid:a00000006203010C0101";
    static final String sAID_AppletInstance = "aid:a00000006203010C0101";

    private static final CommandAPDU selectApplet = new CommandAPDU(0x00, 0xA4, 0x04, 0x00, AID.from(sAID_AppletInstance).toBytes());
    private static final byte INS_COMPARE_DATA = 0x20; // Use the same constant as in the applet for comparison

    public static void main(String[] args) {
        try {
            // Load properties and CAP file
            CAPFile appFile = CAPFile.from(getArg(args, "cap"));
            Properties props = new Properties();
            props.load(new FileInputStream(getArg(args, "props")));

            AMService ams = AMServiceFactory.getInstance("GP2.2");
            ams.setProperties(props);
            for (String key : ams.getPropertiesKeys()) {
                System.out.println(key + " = " + ams.getProperty(key));
            }

            // Open AMSession to deploy applet
            AMSession deploy = ams.openSession(isdAID)
                    .load(sAID_CAP, appFile.getBytes())
                    .install(sAID_CAP, sAID_AppletClass, sAID_AppletInstance)
                    .close();

            CardTerminal terminal = getTerminal("socket", "127.0.0.1", "9025");
            Card card = terminal.connect("*");
            CardChannel channel = card.getBasicChannel();
            ResponseAPDU response;

            // Select the applet
            response = channel.transmit(selectApplet);
            System.out.println("Select Applet Response: " + response);

            // Prompt user for data input
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter data to compare (exactly 9 characters): ");
            String inputData = scanner.nextLine();
            
            // Ensure input is exactly 9 characters
            if (inputData.length() != 9) {
                System.out.println("Input must be exactly 9 characters.");
                return;
            }
            byte[] DATA_TO_SEND = inputData.getBytes(); // User input data for comparison

            // Compare data
            response = channel.transmit(new CommandAPDU(0x80, INS_COMPARE_DATA, 0x00, 0x00, DATA_TO_SEND));
            System.out.println("Compare Data Response: " + response);

            // Read the response for comparison result
            if (response.getSW() == 0x9000 && response.getBytes().length > 0) {
                boolean isMatch = response.getBytes()[0] == 0x01; // 0x01 means true, 0x00 means false
                System.out.println("Comparison result: " + isMatch); // Output: true/false based on comparison
            } else {
                System.out.println("Error or no comparison result returned. SW: " + Integer.toHexString(response.getSW()));
            }

            // Undeploy the applet
            AMSession undeploy = ams.openSession(isdAID)
                    .uninstall(sAID_AppletInstance)
                    .unload(sAID_CAP)
                    .close();

            card.disconnect(true);
            System.out.println("Application uninstalled and card disconnected.");

        } catch (NoSuchAlgorithmException | NoSuchProviderException | CardException | IOException e) {
            e.printStackTrace();
        }
    }

    private static String getArg(String[] args, String argName) throws IllegalArgumentException {
        String value = null;

        for (String param : args) {
            if (param.startsWith("-" + argName + "=")) {
                value = param.substring(param.indexOf('=') + 1);
            }
        }

        if (value == null || value.length() == 0) {
            throw new IllegalArgumentException("Argument " + argName + " is missing");
        }

        return value;
    }

    private static CardTerminal getTerminal(String... connectionParams) throws NoSuchAlgorithmException, NoSuchProviderException, CardException {
        TerminalFactory tf;
        String connectivityType = connectionParams[0];
        if (connectivityType.equals("socket")) {
            String ipaddr = connectionParams[1];
            String port = connectionParams[2];
            tf = TerminalFactory.getInstance("SocketCardTerminalFactoryType",
                    List.of(new InetSocketAddress(ipaddr, Integer.parseInt(port))),
                    "SocketCardTerminalProvider");
        } else {
            tf = TerminalFactory.getDefault();
        }
        return tf.terminals().list().get(0);
    }
}
/**
 * Copyright (c) 1998, 2024, Oracle and/or its affiliates. All rights reserved.
 */

package com.oracle.jcclassic.samples.helloworld;

import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.Util;
import javacard.security.CryptoException;
import javacard.security.KeyBuilder;
import javacard.security.SecretKey;
import javacard.security.MessageDigest;
import javacardx.crypto.Cipher;
import javacardx.crypto.Cipher;
import javacardx.crypto.CryptoException;

public class HelloWorld extends Applet {
    private static final byte INS_COMPARE_DATA = (byte) 0x10; // Instruction for comparing input data
    private static final byte INS_AES_ENCRYPT = (byte) 0x20; // Instruction for AES encryption
    private static final byte[] TARGET_DATA = { 'D', 'A', 'T', 'A', '_', 'A', 'B', 'C', 'D' }; // Target data for comparison
    private SecretKey aesKey; // AES key

    protected HelloWorld() {
        register();
        // Generate an AES key for encryption
        aesKey = KeyBuilder.buildKey(KeyBuilder.TYPE_AES, KeyBuilder.LENGTH_AES_128, false);
    }

    public static void install(byte[] bArray, short bOffset, byte bLength) {
        new HelloWorld();
    }

    @Override
    public void process(APDU apdu) {
        byte[] buffer = apdu.getBuffer();

        // Check SELECT APDU command
        if (selectingApplet()) {
            return;
        }

        byte ins = buffer[ISO7816.OFFSET_INS]; // Get the instruction byte

        // Handle instruction for comparing data
        if (ins == INS_COMPARE_DATA) {
            short bytesRead = apdu.setIncomingAndReceive();
            if (bytesRead != TARGET_DATA.length) {
                ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
            }

            // Compare the input data with TARGET_DATA
            boolean isMatch = Util.arrayCompare(buffer, ISO7816.OFFSET_CDATA, TARGET_DATA, (short) 0, bytesRead) == 0;

            // Prepare response
            apdu.setOutgoing();
            apdu.setOutgoingLength((short) 1);
            buffer[0] = (byte) (isMatch ? 0x01 : 0x00); // 0x01 for true, 0x00 for false
            apdu.sendBytes((short) 0, (short) 1);
        } 
        // Handle instruction for AES encryption
        else if (ins == INS_AES_ENCRYPT) {
            short bytesRead = apdu.setIncomingAndReceive();
            byte[] inputData = new byte[bytesRead];
            Util.arrayCopy(buffer, ISO7816.OFFSET_CDATA, inputData, (short) 0, bytesRead);

            // Encrypt the input data
            byte[] encryptedData = new byte[16]; // AES block size is 16 bytes
            Cipher cipher = Cipher.getInstance(Cipher.AES_CBC, false);
            cipher.init(aesKey, Cipher.MODE_ENCRYPT);
            cipher.doFinal(inputData, (short) 0, bytesRead, encryptedData, (short) 0);

            // Prepare response
            apdu.setOutgoing();
            apdu.setOutgoingLength((short) encryptedData.length);
            Util.arrayCopy(encryptedData, (short) 0, buffer, (short) 0, (short) encryptedData.length);
            apdu.sendBytes((short) 0, (short) encryptedData.length);
        } else {
            ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
        }
    }
}
